{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAQMC,EAAOC,SAASC,MAAM,G,WAoCiHC,EAATC,GACO,OAAP,IAAJC,SAAR,SAADC,EAATC,GAC2B,IAANC,EAAhBC,KAALC,SAAX,GAEsCC,YAAX,WACKH,GACEF,EAAR,CAAFH,WAAVC,UAEsBG,EAAP,CAAFJ,WAAVC,S,GACkBA,E,IA5CtIJ,EAAKY,iBAAiB,U,SAOeC,GACnCA,EAAEC,iBAGF,IADA,IAAMC,EAAW,GACRC,EAAI,EAAGA,EAAIhB,EAAKiB,SAASC,OAAOC,MAAOH,GAAK,EACnDD,EAASK,KAAKC,EAAcL,GAcRb,EAd0Ba,EAezCM,OAAOtB,EAAKiB,SAASb,MAAMe,OAAShB,EAAWH,EAAKiB,SAASM,KAAKJ,SAD3E,IAAwBhB,EAXtB,IAAK,IAAIqB,EAAI,EAAGA,EAAIxB,EAAKiB,SAASC,OAAOC,MAAOK,GAAK,EACnDT,EAASS,GACNC,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBN,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE9D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBN,EAAA6B,OAAOI,QAAQ,sBAAuCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport '../css/promises.css';\n\n/* HTML містить розмітку форми, в поля якої користувач буде вводити\n  - першу затримку в мілісекундах,\n  - крок збільшення затримки для кожного промісу після першого\n  - кількість промісів, яку необхідно створити.\n*/\nconst form = document.forms[0];\nform.addEventListener('submit', handleSubmit);\n\n/*   Напиши скрипт, який на момент сабміту форми викликає функцію\n  createPromise(position, delay) стільки разів, скільки ввели в\n  поле amount. Під час кожного виклику передай їй номер промісу\n  (position), що створюється, і затримку, враховуючи\n  першу затримку (delay), введену користувачем, і крок (step) */\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const promises = [];\n  for (let i = 0; i < form.elements.amount.value; i += 1) {\n    promises.push(createPromise(i, calculateDelay(i)));\n  }\n\n  for (let i = 0; i < form.elements.amount.value; i += 1) {\n    promises[i]\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction calculateDelay(position) {\n  return Number(form.elements.delay.value) + position * form.elements.step.value;\n}\n\n/* createPromise має повертати проміс, що виконується або відхиляється\n  через delay мс. Значенням промісу повинен бути об'єкт,\n  з властивостями position і delay.\n  Використовуй початковий код функції для вибору\n  того,що зробити з промісом-виконати чи відхилити.  */\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","forms","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","promises","i","elements","amount","value","push","$ce04d3a99e08e73b$var$createPromise","Number","step","i1","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.98c5d5b0.js.map"}